MEMORY {
    ZP:             start = $0000, size = $0100, type = rw;
    HWSTACK:        start = $0100, size = $0100, type = rw;
    MAP_IO:         start = $0200, size = $0100, type = rw;
    INPUT_BUFFER:   start = $0300, size = $0080, type = rw, file = "";
    RAMCODE:        start = $0380, size = $3980, type = rw;
    RAMBSS:         start = $3D00, size = $00B7, type = rw;
    FAT32_VARS:     start = $3DB7, size = $0049, type = rw;
    FAT32_WRK:      start = $3E00, size = $0200, type = rw;
    BASROM:         start = $8000, size = $6000, fill = yes, file = %O;
    INTEL_HEX:      start = $E000, size = $0FF3, fill = yes, file = %O;
    KRUSADER:       start = $EFF3, size = $100d, fill = yes, file = %O;
    DUMMY:          start = $0000, size = $00FF, file = ""; 
}

SEGMENTS {
    ZEROPAGE:       load = ZP,              type = zp;
    INPUT_BUFFER:   load = INPUT_BUFFER,    type = rw;
    HEADER:         load = BASROM,          type = ro;
    VECTORS:        load = BASROM,          type = ro;
    KEYWORDS:       load = BASROM,          type = ro;
    ERROR:          load = BASROM,          type = ro;
    CODE:           load = BASROM,          type = ro;
    CHRGET:         load = BASROM,          type = ro;
    INIT:           load = BASROM,          type = ro;
    EXTRA:          load = BASROM,          type = ro;
    DUMMY:          load = DUMMY;
    BIOS:           load = BASROM,          type = ro;
    INTEL:          load = INTEL_HEX,       type = ro, start = $E000, define = yes;
    F000:           load = KRUSADER,        type = ro, start = $F000, define = yes;
    FF00:           load = KRUSADER,        type = ro, start = $FF00, define = yes;
    FFDC:           load = KRUSADER,        type = ro, start = $FFDC, define = yes;
    FFFA:           load = KRUSADER,        type = ro, start = $FFFA, define = yes;
    DATA:           load = BASROM,          type = rw;
    RODATA:         load = BASROM,          type = ro;
    BSS:            load = RAMBSS,          type = zp;
}

